Note: all numbers are in decimal, unless prefixed by a 0x for hex or 0 for octal
Note: all operands are passed little-endian
Note: addresses and registers are 32-bit, unless otherwise specified
Note: moving is SOURCE, DEST
The program is read into a virtual memory space by the loader. Execution starts at location 0. The execution cycle is as follows:
1. Fetch instruction byte from the memory location pointed to by the program counter (abbreviated PC).
2. Execute the instruction
3. Increment the PC.
There are 4 general-purpose registers:
RA
RB
RC
RD
There are several specialized registers that generally should not be modified.
RSP - the pointer to the next location to push to on the stack
PC - the program counter, as previously mentioned
RF - the 8-bit flags register
The format of the flags register is as follows:
Bit 7    6        5        4     3 2 1 0 (LSB)
    Zero Negative Overflow Carry 
The instruction set is as follows:
0x00: NOP
      - Do nothing
0x01: LX RA
      - Load 4 byte operands into RA, with least significant byte first (little endian)
0x02: LX RB
      - Load 4 byte operands into RB, with least significant byte first (little endian)
0x03: LX RC
      - Load 4 byte operands into RC, with least significant byte first (little endian)
0x04: LX RD
      - Load 4 byte operands into RD, with least significant byte first (little endian)
0x05: LXP RA
      - Load the 4 bytes pointed to by the operand into RA
0x06: LXP RB
      - Load the 4 bytes pointed to by the operand into RB
0x07: LXP RC
      - Load the 4 bytes pointed to by the operand into RC
0x08: LXP RD
      - Load the 4 bytes pointed to by the operand into RD
The LR family of instructions move register to register
0x09: LR RA, RB 
0x0A: LR RB, RA
0x0B: LR RA, RC
0x0C: LR RC, RA
0x0D: LR RA, RD
0x0E: LR RD, RA
0x0F: LR RC, RB
0x10: LR RB, RC
0x11: LR RB, RD
0x12: LR RD, RB
0x13: LR RC, RD
0x14: LR RD, RC
The LPR family of instructions moves 4 bytes from a memory location pointed to by a register to another register
0x15: LPR *RA, RB
0x16: LPR *RA, RC
0x17: LPR *RA, RD
0x18: LPR *RB, RA
0x19: LPR *RB, RC
0x1A: LPR *RB, RD
0x1B: LPR *RC, RA
0x1C: LPR *RC, RB
0x1D: LPR *RC, RD
0x1E: LPR *RD, RA
0x1F: LPR *RD, RB
0x20: LPR *RD, RC
The LMX family of instructions moves 4 bytes from a register to an explicit location, little endian
0x21: LMX RA
0x22: LMX RB
0x23: LMX RC
0x24: LMX RD
The LMR family of instructions moves 4 bytes from a register to a location specified by a register
0x25: LMR RA, *RB
0x26: LMR RA, *RC
0x27: LMR RA, *RD
0x28: LMR RB, *RA
0x29: LMR RB, *RC
0x2A: LMR RB, *RD
0x2B: LMR RC, *RA
0x2C: LMR RC, *RB
0x2D: LMR RC, *RD
0x2E: LMR RD, *RA
0x2F: LMR RD, *RB
0x30: LMR RD, *RC
The LSR family of instructions moves a special register to RA
0x31: LSR RSP
0x32: LSR PC
0x33: LSR RF (to the last byte byte in RA, first 24 zeroed)
The PUSHR family of instructions pushes a register on the stack
0x34: PUSHR RA
0x35: PUSHR RB
0x36: PUSHR RC
0x37: PUSHR RD
The PUSHXB instruction pushes one explicitly specified byte onto the stack
0x38: PUSHXB
The PUSHXD instruction pushes two explicitly specified bytes onto the stack
0x39: PUSHXD
The PUSHRB family of instructions pushes the lower 8 bits of a register onto the stack
0x3A: PUSHRB RA
0x3B: PUSHRB RB
0x3C: PUSHRB RC
0x3D: PUSHRB RD
The PUSHRD family of instructions pushes the lower 16 bits of a register onto the stack
0x3E: PUSHRD RA
0x3F: PUSHRD RB
0x40: PUSHRD RC
0x41: PUSHRD R
The POP family of instructions pops the top of the stack into a register
0x42: POP RA
0x43: POP RB
0x44: POP RC
0x45: POP RD
0x80: System call
      - Availible system calls:
       	- 0x00: PutS
	  - Print a null terminated string, specified in RA, to the terminal
	- 0x01: GetTick
	  - Get the system uptime in hundredths of a second
	- 0x02: OutByte
	  - Write a byte specified in the lower 8 bits of RA to the port specified by RB
	- 0x03: InByte
	  - Read a byte into RA from the port specifed by RB
	- 0x04: KernelPanic
	  - Cause a kernel panic, printing the string specified in RA
	- 0x05: RegisterHandler
	  - Register an interrupt handler for the interrupt specified in RB, using the address specified in RA, and unregistering the previous handler
	- 0x06: UnregisterHandler
	  - Unregister an interrupt handler, specified in RA
	- 0x07: RegisterKBDHandler
	  - Register a function, specified in RA, to be called when a key is pressed
	  - Will push the key pressed onto the stack when key is pressed
	- 0x08: DisableInterrupts
	  - Disable interrupts, only in real mode
	- 0x09: EnableInterrupts
	  - Enable interrupts, only in real mode